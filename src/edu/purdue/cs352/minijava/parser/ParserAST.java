/* Generated By:JavaCC: Do not edit this line. ParserAST.java */
        package edu.purdue.cs352.minijava.parser;

        import java.util.*;
        import edu.purdue.cs352.minijava.*;
        import edu.purdue.cs352.minijava.ast.*;

        public class ParserAST implements ParserASTConstants {

// Grammar --------------------------------------------------------------------
  final public Program Program() throws ParseException {
        Main main;
        ClassDecl cd;
        List<ClassDecl> cds = new ArrayList<ClassDecl>();
    main = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cd = ClassDeclaration();
                                    cds.add(cd);
    }
    jj_consume_token(0);
          {if (true) return new Program(token, main, cds);}
    throw new Error("Missing return statement in function");
  }

  final public Main MainClass() throws ParseException {
        Statement body;
    jj_consume_token(KW_CLASS);
    Identifier();
    jj_consume_token(SYM_LBRACE);
    jj_consume_token(KW_PUBLIC);
    jj_consume_token(KW_STATIC);
    jj_consume_token(KW_VOID);
    jj_consume_token(KW_MAIN);
    jj_consume_token(SYM_LPAREN);
    jj_consume_token(KW_STRING);
    jj_consume_token(SYM_LSQPAREN);
    jj_consume_token(SYM_RSQPAREN);
    Identifier();
    jj_consume_token(SYM_RPAREN);
    jj_consume_token(SYM_LBRACE);
    body = Statement();
    jj_consume_token(SYM_RBRACE);
    jj_consume_token(SYM_RBRACE);
          {if (true) return new Main(token, body);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDecl ClassDeclaration() throws ParseException {
        String name;
        String xtends = null;
        List<VarDecl> fields = new ArrayList<VarDecl>();
        List<MethodDecl> methods = new ArrayList<MethodDecl>();

        VarDecl field;
        MethodDecl method;
    jj_consume_token(KW_CLASS);
    name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_EXTENDS:
      jj_consume_token(KW_EXTENDS);
      xtends = Identifier();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(SYM_LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_INT:
      case KW_BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      field = VarDeclaration();
                                             fields.add(field);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      method = MethodDeclaration();
                                                 methods.add(method);
    }
    jj_consume_token(SYM_RBRACE);
          {if (true) return new ClassDecl(token, name, xtends, fields, methods);}
    throw new Error("Missing return statement in function");
  }

  final public VarDecl VarDeclaration() throws ParseException {
        Type type;
        String name;
    type = Type();
    name = Identifier();
    jj_consume_token(SYM_SEMICOLON);
          {if (true) return new VarDecl(token, type, name);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDecl MethodDeclaration() throws ParseException {
        Type retType;
        String name;
        List<Parameter> parameters = new ArrayList<Parameter>();
        List<VarDecl> vds = new ArrayList<VarDecl>();
        List<Statement> body = new ArrayList<Statement>();
        Exp retExp;

        Type paramType;
        String paramName;
        VarDecl vd;
        Statement statement;
    jj_consume_token(KW_PUBLIC);
    retType = Type();
    name = Identifier();
    jj_consume_token(SYM_LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_INT:
    case KW_BOOLEAN:
    case IDENTIFIER:
      paramType = Type();
      paramName = Identifier();
                  parameters.add(new Parameter(token, paramType, paramName));
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYM_COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(SYM_COMMA);
        paramType = Type();
        paramName = Identifier();
                          parameters.add(new Parameter(token, paramType, paramName));
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(SYM_RPAREN);
    jj_consume_token(SYM_LBRACE);
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      vd = VarDeclaration();
                                                       vds.add(vd);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_IF:
      case KW_WHILE:
      case KW_TRUE:
      case KW_FALSE:
      case KW_THIS:
      case KW_NEW:
      case KW_PRINT:
      case SYM_LBRACE:
      case SYM_LPAREN:
      case SYM_EXCL:
      case IDENTIFIER:
      case INT_LITERAL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      statement = Statement();
                                            body.add(statement);
    }
    jj_consume_token(KW_RETURN);
    retExp = Expression();
    jj_consume_token(SYM_SEMICOLON);
    jj_consume_token(SYM_RBRACE);
          {if (true) return new MethodDecl(token, retType, name, parameters, vds, body, retExp);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
        Type ret;
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_INT:
      jj_consume_token(KW_INT);
                             ret = new TypeInt(token);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_LSQPAREN:
        jj_consume_token(SYM_LSQPAREN);
        jj_consume_token(SYM_RSQPAREN);
                                                 ret = new TypeIntArray(token);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      break;
    case KW_BOOLEAN:
      jj_consume_token(KW_BOOLEAN);
                                 ret = new TypeBoolean(token);
      break;
    case IDENTIFIER:
      name = Identifier();
                                            ret = new Type(token, name);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
        Statement ret;

        List<Statement> body = new ArrayList<Statement>();
        Statement bodyStatement;

        Exp condition;
        Statement ifPart;
        Statement elsePart = null;

        Exp value;

        Exp exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_LBRACE:

      jj_consume_token(SYM_LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case KW_IF:
        case KW_WHILE:
        case KW_TRUE:
        case KW_FALSE:
        case KW_THIS:
        case KW_NEW:
        case KW_PRINT:
        case SYM_LBRACE:
        case SYM_LPAREN:
        case SYM_EXCL:
        case IDENTIFIER:
        case INT_LITERAL:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
        bodyStatement = Statement();
                                                        body.add(bodyStatement);
      }
      jj_consume_token(SYM_RBRACE);
                          ret = new BlockStatement(token, body);
      break;
    case KW_IF:

      jj_consume_token(KW_IF);
      jj_consume_token(SYM_LPAREN);
      condition = Expression();
      jj_consume_token(SYM_RPAREN);
      ifPart = Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_ELSE:
        jj_consume_token(KW_ELSE);
        elsePart = Statement();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                          ret = new IfStatement(token, condition, ifPart, elsePart);
      break;
    case KW_WHILE:

      jj_consume_token(KW_WHILE);
      jj_consume_token(SYM_LPAREN);
      condition = Expression();
      jj_consume_token(SYM_RPAREN);
      bodyStatement = Statement();
                          ret = new WhileStatement(token, condition, bodyStatement);
      break;
    case KW_PRINT:

      jj_consume_token(KW_PRINT);
      jj_consume_token(SYM_LPAREN);
      value = Expression();
      jj_consume_token(SYM_RPAREN);
      jj_consume_token(SYM_SEMICOLON);
                          ret = new PrintStatement(token, value);
      break;
    case KW_TRUE:
    case KW_FALSE:
    case KW_THIS:
    case KW_NEW:
    case SYM_LPAREN:
    case SYM_EXCL:
    case IDENTIFIER:
    case INT_LITERAL:

      exp = Expression();
      jj_consume_token(SYM_SEMICOLON);
                          ret = new ExpStatement(token, exp);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Exp Expression() throws ParseException {
        Exp ret;
    ret = AssignExpr();
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Exp AssignExpr() throws ParseException {
        Exp ret;

        Exp value = null;
    ret = LogicOp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_EQUAL:
      jj_consume_token(SYM_EQUAL);
      value = AssignExpr();
                                                 ret = new AssignExp(token, ret, value);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// CmpOp || CmpOp && CmpOp && CmpOp ... left-binding
  final public Exp LogicOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = CmpOp();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_AMPAMP:
      case SYM_BARBAR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      postfix = LogicOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp LogicOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_AMPAMP:
      jj_consume_token(SYM_AMPAMP);
      break;
    case SYM_BARBAR:
      jj_consume_token(SYM_BARBAR);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;
    right = CmpOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// AddOp < AddOp == AddOp != AddOp >= AddOp ... left-binding
  final public Exp CmpOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = AddOp();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_LESS:
      case SYM_LESSEQUAL:
      case SYM_EQUALEQUAL:
      case SYM_EXCLEQUAL:
      case SYM_MORE:
      case SYM_MOREEQUAL:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      postfix = CmpOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp CmpOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_LESS:
      jj_consume_token(SYM_LESS);
      break;
    case SYM_LESSEQUAL:
      jj_consume_token(SYM_LESSEQUAL);
      break;
    case SYM_EQUALEQUAL:
      jj_consume_token(SYM_EQUALEQUAL);
      break;
    case SYM_EXCLEQUAL:
      jj_consume_token(SYM_EXCLEQUAL);
      break;
    case SYM_MORE:
      jj_consume_token(SYM_MORE);
      break;
    case SYM_MOREEQUAL:
      jj_consume_token(SYM_MOREEQUAL);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op =  token;
    right = AddOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// MulOp + MulOp - MulOp ... left-binding 
  final public Exp AddOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = MulOp();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_PLUS:
      case SYM_MINUS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      postfix = AddOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp AddOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_PLUS:
      jj_consume_token(SYM_PLUS);
      break;
    case SYM_MINUS:
      jj_consume_token(SYM_MINUS);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;
    right = MulOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// UnaryOp * UnaryOp / UnaryOp % UnaryOp ... left-binding
  final public Exp MulOp() throws ParseException {
        Exp ret;
        BinaryExp postfix;
    ret = UnaryOp();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_STAR:
      case SYM_SLASH:
      case SYM_PERCENT:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
      postfix = MulOp_postfix();
                  postfix.setLeft(ret);  ret = postfix;
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BinaryExp MulOp_postfix() throws ParseException {
        Token op;
        Exp right;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_STAR:
      jj_consume_token(SYM_STAR);
      break;
    case SYM_SLASH:
      jj_consume_token(SYM_SLASH);
      break;
    case SYM_PERCENT:
      jj_consume_token(SYM_PERCENT);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          op = token;
    right = UnaryOp();
          {if (true) return new BinaryExp(null, op, right);}
    throw new Error("Missing return statement in function");
  }

// !!!!...PostfixOp
  final public Exp UnaryOp() throws ParseException {
        Exp ret;
        Exp sub;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYM_EXCL:

      jj_consume_token(SYM_EXCL);
      sub = UnaryOp();
                          ret = new NotExp(token, sub);
      break;
    case KW_TRUE:
    case KW_FALSE:
    case KW_THIS:
    case KW_NEW:
    case SYM_LPAREN:
    case IDENTIFIER:
    case INT_LITERAL:

      ret = PostfixOp();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// PrimaryExp[Exp][Exp][Exp]...
// PrimaryExp.method1().method2(Exp, Exp, Exp).method3(Exp) ...
// PrimaryExp.field1.field2.field3 ...
  final public Exp PostfixOp() throws ParseException {
        Exp ret;

        IndexExp indexPostfix;
        MemberExp memberPostfix;
        CallExp callPostfix;
    ret = PrimaryExp();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_LSQPAREN:
      case SYM_DOT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYM_LSQPAREN:

        indexPostfix = PostfixOp_indexPostfix();
                          indexPostfix.setTarget(ret);  ret = indexPostfix;
        break;
      case SYM_DOT:
        if (jj_2_2(3)) {

          callPostfix = PostfixOp_callPostfix();
                                  callPostfix.setTarget(ret);  ret = callPostfix;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SYM_DOT:

            memberPostfix = PostfixOp_memberPostfix();
                                  memberPostfix.setSub(ret);  ret = memberPostfix;
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public IndexExp PostfixOp_indexPostfix() throws ParseException {
        Exp index;
    jj_consume_token(SYM_LSQPAREN);
    index = Expression();
    jj_consume_token(SYM_RSQPAREN);
          {if (true) return new IndexExp(token, null, index);}
    throw new Error("Missing return statement in function");
  }

  final public CallExp PostfixOp_callPostfix() throws ParseException {
        String method;
        List<Exp> arguments = new ArrayList<Exp>();
        Exp arg;
    jj_consume_token(SYM_DOT);
    method = Identifier();
    jj_consume_token(SYM_LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KW_TRUE:
    case KW_FALSE:
    case KW_THIS:
    case KW_NEW:
    case SYM_LPAREN:
    case SYM_EXCL:
    case IDENTIFIER:
    case INT_LITERAL:
      arg = Expression();
                                                 arguments.add(arg);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYM_COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_13;
        }
        jj_consume_token(SYM_COMMA);
        arg = Expression();
                                                               arguments.add(arg);
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(SYM_RPAREN);
         //System.out.print("."+method+"()"); 
        {if (true) return new CallExp(token, null, method, arguments);}
    throw new Error("Missing return statement in function");
  }

  final public MemberExp PostfixOp_memberPostfix() throws ParseException {
        String member;
    jj_consume_token(SYM_DOT);
    member = Identifier();
          {if (true) return new MemberExp(token, null, member);}
    throw new Error("Missing return statement in function");
  }

  final public Exp PrimaryExp() throws ParseException {
        Exp ret;

        Exp size;
        String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
                          ret = new IntLiteralExp(token, Integer.parseInt(token.image));
      break;
    case KW_TRUE:
      jj_consume_token(KW_TRUE);
                          ret = new BooleanLiteralExp(token, true);
      break;
    case KW_FALSE:
      jj_consume_token(KW_FALSE);
                          ret = new BooleanLiteralExp(token, false);
      break;
    case IDENTIFIER:
      Identifier();
                          ret = new VarExp(token, token.image);
      break;
    case KW_THIS:
      jj_consume_token(KW_THIS);
                          ret = new ThisExp(token);
      break;
    case KW_NEW:
      jj_consume_token(KW_NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KW_INT:
        jj_consume_token(KW_INT);
        jj_consume_token(SYM_LSQPAREN);
        size = Expression();
        jj_consume_token(SYM_RSQPAREN);
                                          ret = new NewIntArrayExp(token, size);
        break;
      case IDENTIFIER:
        name = Identifier();
        jj_consume_token(SYM_LPAREN);
        jj_consume_token(SYM_RPAREN);
                                          ret = new NewObjectExp(token, name);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case SYM_LPAREN:
      jj_consume_token(SYM_LPAREN);
      ret = Expression();
      jj_consume_token(SYM_RPAREN);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
          {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(SYM_DOT)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(SYM_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(SYM_LSQPAREN)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(KW_BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(KW_INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public ParserASTTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x4000,0x30000,0x200,0x0,0x30000,0x17f40000,0x40000000,0x30000,0x17f40000,0x80000,0x17f40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11e00000,0x40000000,0x0,0x40000000,0x0,0x11e00000,0x10000,0x11e00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40000,0x0,0x20000,0x40000,0xc8000,0x0,0x40000,0xc8000,0x0,0xc8000,0x2,0xc,0xc,0x3f0,0x3f0,0xc00,0xc00,0x7000,0x7000,0xc8000,0x10000,0x10000,0x10000,0x20000,0xc8000,0x40000,0xc0000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ParserAST(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserAST(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ParserAST(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserASTTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserAST(ParserASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserASTTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                /*
		public static void main(String[] args) {
			ParserAST parser;
			Program program;

			if (args.length != 1) {
				System.out.println("Use: mjparse <input file>");
				return;
			}

			try {
				parser = new ParserAST(new java.io.FileInputStream(args[0]));
			} catch (java.io.FileNotFoundException ex) {
				System.out.println("File " + args[0] + " not found.");
				return;
			}
			
			try {
				program = parser.Program();
				ASTToSExp visitor = new ASTToSExp();
				System.out.println(program.accept(visitor));
				
			} catch (ParseException ex) {
				System.out.println(ex.getMessage());
				return;
			}
		}*/
        }
